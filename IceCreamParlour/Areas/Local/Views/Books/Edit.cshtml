@model IceCreamParlour.Models.Book

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Local/Views/Shared/_AdminView.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Books", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Book_Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })*@
                <input type="file" name="fileEdit" id="update-image" /><span id="resumeMsg"></span>
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Create_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Create_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "read-only" } })
                @Html.ValidationMessageFor(model => model.Create_Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdminAdd_Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("AdminAdd_Id", null, htmlAttributes: new { @class = "form-control", @readonly = "read-only" })
                @Html.ValidationMessageFor(model => model.AdminAdd_Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdminUpdate_Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.AdminUpdate_Id, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextBox("AdminUpdate_Id", Session["Admin_Id"], new { @readonly = "read-only" })
                @Html.ValidationMessageFor(model => model.AdminUpdate_Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Update_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Update_Date, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextBox("Update_Date", DateTime.Now.ToString("dd-MMM-yyyy"), new { @readonly = "read-only" })
                @Html.ValidationMessageFor(model => model.Update_Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IsActive", new List<SelectListItem>
                   {
                       new SelectListItem{Text="Active",Value="0"},
                       new SelectListItem{Text="Not Active",Value="1"},
                   }, "SelectActive")
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.IsDelete, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.IsDelete, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsDelete, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="submit" value="Save" class="btn btn-inverse-primary" />
            </div>
        </div>
    </div>@Html.Raw(TempData["msg"])
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    window.addEventListener("load", function () {
        this.document.getElementById("submit").addEventListener("click", function (event) {
            var error = false;
            var filename = document.getElementById("fileEdit").value;
            if (filename == "") {
                error = true;
                document.getElementById("resumeMsg").innerHTML = "Must upload a resume file"
            }
            alert("You has submit a book");
            if (error) {
                event.preventDefault();
            }
        })
    })
</script>